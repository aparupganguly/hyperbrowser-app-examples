import archiver from 'archiver';
import { Readable } from 'stream';

export interface ZipFile {
  name: string;
  content: string;
  path?: string;
}

export interface ZipResult {
  buffer: Buffer;
  filename: string;
}

export class ZipBuilder {
  async createZip(files: ZipFile[], zipName: string): Promise<ZipResult> {
    return new Promise((resolve, reject) => {
      const archive = archiver('zip', {
        zlib: { level: 9 } // Maximum compression
      });

      const chunks: Buffer[] = [];
      
      archive.on('data', (chunk) => {
        chunks.push(chunk);
      });

      archive.on('end', () => {
        const buffer = Buffer.concat(chunks);
        resolve({
          buffer,
          filename: `${zipName}.zip`
        });
      });

      archive.on('error', (err) => {
        reject(err);
      });

      // Add files to archive
      files.forEach(file => {
        const filePath = file.path || file.name;
        archive.append(file.content, { name: filePath });
      });

      archive.finalize();
    });
  }

  async createPlaywrightZip(playwrightCode: string, baseUrl: string): Promise<ZipResult> {
    const packageJson = {
      name: 'flowmapper-playwright-tests',
      version: '1.0.0',
      description: 'Generated Playwright tests from FlowMapper',
      scripts: {
        test: 'playwright test',
        'test:headed': 'playwright test --headed',
        'test:ui': 'playwright test --ui',
        'test:debug': 'playwright test --debug'
      },
      devDependencies: {
        '@playwright/test': '^1.40.0'
      }
    };

    const playwrightConfig = `import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: 'html',
  use: {
    baseURL: '${baseUrl}',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
  },
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
  ],
});`;

    const readme = `# FlowMapper Generated Playwright Tests

This test suite was automatically generated by FlowMapper based on your website crawl.

## Setup

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Install Playwright browsers:
   \`\`\`bash
   npx playwright install
   \`\`\`

## Running Tests

- Run all tests: \`npm test\`
- Run tests in headed mode: \`npm run test:headed\`
- Run tests with UI: \`npm run test:ui\`
- Debug tests: \`npm run test:debug\`

## Generated Files

- \`tests/user-flow.spec.ts\` - Main test file with your user flow
- \`playwright.config.ts\` - Playwright configuration
- \`package.json\` - Project dependencies

## Customization

You can modify the tests in \`tests/user-flow.spec.ts\` to:
- Add assertions for specific elements
- Modify test data and inputs
- Add more detailed verification steps
- Extend the test coverage

Generated by FlowMapper - ${new Date().toISOString()}
`;

    const files: ZipFile[] = [
      {
        name: 'package.json',
        content: JSON.stringify(packageJson, null, 2)
      },
      {
        name: 'playwright.config.ts',
        content: playwrightConfig
      },
      {
        name: 'user-flow.spec.ts',
        content: playwrightCode,
        path: 'tests/user-flow.spec.ts'
      },
      {
        name: 'README.md',
        content: readme
      }
    ];

    return this.createZip(files, 'playwright-tests');
  }

  async createReactZip(reactCode: string): Promise<ZipResult> {
    const packageJson = {
      name: 'flowmapper-react-xstate',
      version: '1.0.0',
      description: 'Generated React XState component from FlowMapper',
      private: true,
      scripts: {
        dev: 'next dev',
        build: 'next build',
        start: 'next start',
        lint: 'next lint'
      },
      dependencies: {
        react: '^18.2.0',
        'react-dom': '^18.2.0',
        next: '^14.0.0',
        xstate: '^4.38.0',
        '@xstate/react': '^3.2.0'
      },
      devDependencies: {
        '@types/node': '^20.0.0',
        '@types/react': '^18.2.0',
        '@types/react-dom': '^18.2.0',
        typescript: '^5.0.0'
      }
    };

    const nextConfig = `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
}

module.exports = nextConfig`;

    const tsConfig = {
      compilerOptions: {
        target: 'es5',
        lib: ['dom', 'dom.iterable', 'es6'],
        allowJs: true,
        skipLibCheck: true,
        strict: true,
        forceConsistentCasingInFileNames: true,
        noEmit: true,
        esModuleInterop: true,
        module: 'esnext',
        moduleResolution: 'bundler',
        resolveJsonModule: true,
        isolatedModules: true,
        jsx: 'preserve',
        incremental: true,
        plugins: [
          {
            name: 'next'
          }
        ],
        paths: {
          '@/*': ['./*']
        }
      },
      include: ['next-env.d.ts', '**/*.ts', '**/*.tsx', '.next/types/**/*.ts'],
      exclude: ['node_modules']
    };

    const appLayout = `export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}`;

    const appPage = `import UserFlowComponent from '../components/UserFlow'

export default function Home() {
  return (
    <main className="container mx-auto p-8">
      <h1 className="text-3xl font-bold mb-8">FlowMapper Generated User Flow</h1>
      <UserFlowComponent />
    </main>
  )
}`;

    const readme = `# FlowMapper Generated React XState Component

This React component was automatically generated by FlowMapper and uses XState for state management.

## Setup

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Run the development server:
   \`\`\`bash
   npm run dev
   \`\`\`

3. Open [http://localhost:3000](http://localhost:3000) in your browser

## Generated Files

- \`components/UserFlow.tsx\` - Main XState component with your user flow
- \`app/page.tsx\` - Next.js page component
- \`app/layout.tsx\` - Root layout
- \`package.json\` - Project dependencies

## Usage

The generated component provides:
- Visual state representation
- Interactive controls to trigger state transitions
- Context data display
- Screenshot previews (if available)

## Customization

You can extend the XState machine in \`components/UserFlow.tsx\` to:
- Add more states and transitions
- Include guards and conditions
- Add side effects and services
- Integrate with APIs and external systems

Generated by FlowMapper - ${new Date().toISOString()}
`;

    const files: ZipFile[] = [
      {
        name: 'package.json',
        content: JSON.stringify(packageJson, null, 2)
      },
      {
        name: 'next.config.js',
        content: nextConfig
      },
      {
        name: 'tsconfig.json',
        content: JSON.stringify(tsConfig, null, 2)
      },
      {
        name: 'layout.tsx',
        content: appLayout,
        path: 'app/layout.tsx'
      },
      {
        name: 'page.tsx',
        content: appPage,
        path: 'app/page.tsx'
      },
      {
        name: 'UserFlow.tsx',
        content: reactCode,
        path: 'components/UserFlow.tsx'
      },
      {
        name: 'README.md',
        content: readme
      }
    ];

    return this.createZip(files, 'react-xstate-component');
  }
} 