import archiver from 'archiver';
import { CodegenResult } from './codegen';

export interface ZipOptions {
  slug: string;
  title: string;
  codegenResult: CodegenResult;
  sampleData: any;
}

export function createZipBuffer(options: ZipOptions): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const { slug, title, codegenResult, sampleData } = options;
    
    const archive = archiver('zip', {
      zlib: { level: 9 } // Sets the compression level
    });
    
    const buffers: Buffer[] = [];
    
    archive.on('data', (chunk) => {
      buffers.push(chunk);
    });
    
    archive.on('end', () => {
      const finalBuffer = Buffer.concat(buffers);
      resolve(finalBuffer);
    });
    
    archive.on('error', (err) => {
      reject(err);
    });
    
    // Add files to archive
    archive.append(codegenResult.openapi, { name: 'openapi.yaml' });
    archive.append(codegenResult.sdk, { name: 'sdk.ts' });
    archive.append(codegenResult.postman, { name: 'postman.json' });
    
    // Add sample data
    archive.append(JSON.stringify(sampleData, null, 2), { name: 'sample-data.json' });
    
    // Add README
    const readme = generateReadme(slug, title);
    archive.append(readme, { name: 'README.md' });
    
    // Add usage examples
    const examples = generateExamples(slug, title);
    archive.append(examples, { name: 'examples.md' });
    
    archive.finalize();
  });
}

function generateReadme(slug: string, title: string): string {
  return `# ${title} API

Auto-generated API client for scraping data from ${title}.

## Files Included

- \`openapi.yaml\` - OpenAPI 3.0 specification
- \`sdk.ts\` - TypeScript SDK for easy integration
- \`postman.json\` - Postman collection for testing
- \`sample-data.json\` - Sample response data
- \`examples.md\` - Usage examples

## Quick Start

### Using the TypeScript SDK

\`\`\`typescript
import { ${slug.replace(/[^a-zA-Z0-9]/g, '')}Client } from './sdk';

const client = new ${slug.replace(/[^a-zA-Z0-9]/g, '')}Client();
const data = await client.getData();
console.log(data);
\`\`\`

### Using fetch directly

\`\`\`javascript
const response = await fetch('/api/data/${slug}');
const data = await response.json();
console.log(data);
\`\`\`

## API Endpoint

\`GET /api/data/${slug}\`

Returns JSON data scraped from the source website.

## Response Format

\`\`\`json
{
  "data": {
    // Your scraped data fields
  },
  "meta": {
    "url": "source-url",
    "lastUpdated": "2024-01-01T00:00:00.000Z",
    "slug": "${slug}"
  }
}
\`\`\`

Generated by [Scrape2API](https://github.com/hyperbrowser/scrape2api)
`;
}

function generateExamples(slug: string, title: string): string {
  return `# Usage Examples

## JavaScript/TypeScript

### Basic Usage
\`\`\`javascript
// Using fetch
const response = await fetch('/api/data/${slug}');
const result = await response.json();
console.log(result.data);
\`\`\`

### With Error Handling
\`\`\`javascript
try {
  const response = await fetch('/api/data/${slug}');
  if (!response.ok) {
    throw new Error(\`HTTP error! status: \${response.status}\`);
  }
  const result = await response.json();
  console.log(result.data);
} catch (error) {
  console.error('Error fetching data:', error);
}
\`\`\`

## Python

### Using requests
\`\`\`python
import requests

response = requests.get('/api/data/${slug}')
response.raise_for_status()
data = response.json()
print(data['data'])
\`\`\`

## curl

### Basic request
\`\`\`bash
curl -X GET '/api/data/${slug}' \\
  -H 'Accept: application/json'
\`\`\`

### With pretty printing
\`\`\`bash
curl -X GET '/api/data/${slug}' \\
  -H 'Accept: application/json' | jq .
\`\`\`

## Node.js

### Using node-fetch
\`\`\`javascript
const fetch = require('node-fetch');

async function getData() {
  const response = await fetch('/api/data/${slug}');
  const data = await response.json();
  return data;
}

getData().then(console.log).catch(console.error);
\`\`\`

### Using axios
\`\`\`javascript
const axios = require('axios');

axios.get('/api/data/${slug}')
  .then(response => console.log(response.data))
  .catch(error => console.error(error));
\`\`\`
`;
} 