import archiver from 'archiver'
import { Readable } from 'stream'

export interface ZipContent {
  answerMarkdown: string
  postmanCollection: any
  endpointManifest: any
  query: string
}

export async function createZipBundle(content: ZipContent): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const archive = archiver('zip', {
      zlib: { level: 9 } // Maximum compression
    })

    const chunks: Buffer[] = []
    
    archive.on('data', (chunk) => {
      chunks.push(chunk)
    })
    
    archive.on('end', () => {
      resolve(Buffer.concat(chunks))
    })
    
    archive.on('error', (err) => {
      reject(err)
    })

    // Add files to the archive
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const sanitizedQuery = content.query.replace(/[^a-zA-Z0-9\s]/g, '').substring(0, 50)
    const prefix = `sourceforge-${sanitizedQuery}-${timestamp}`

    // Add the main answer as markdown
    archive.append(content.answerMarkdown, { 
      name: `${prefix}/answer.md` 
    })

    // Add Postman collection
    archive.append(JSON.stringify(content.postmanCollection, null, 2), {
      name: `${prefix}/postman-collection.json`
    })

    // Add endpoint manifest
    archive.append(JSON.stringify(content.endpointManifest, null, 2), {
      name: `${prefix}/endpoint-manifest.json`
    })

    // Add README with usage instructions
    const readme = `# OpenAI SourceForge Results

Query: ${content.query}
Generated: ${new Date().toISOString()}

## Files Included

- **answer.md**: AI-generated answer with citations
- **postman-collection.json**: Postman v2.1 collection with all discovered endpoints
- **endpoint-manifest.json**: Structured data about all endpoints found

## How to Use

### Postman Collection
1. Open Postman
2. Click "Import" 
3. Select the \`postman-collection.json\` file
4. Explore and test the discovered API endpoints

### Endpoint Manifest
The JSON manifest contains structured data about all endpoints:
- HTTP methods and URLs
- Status codes from actual requests
- Headers captured during live sessions
- Payload information where available

## About

Generated by OpenAI SourceForge - Real-time web research with AI analysis.
Powered by Hyperbrowser for stealth web scraping and OpenAI GPT-4o for intelligent answers.

Visit: https://hyperbrowser.ai
`

    archive.append(readme, {
      name: `${prefix}/README.md`
    })

    // Finalize the archive
    archive.finalize()
  })
} 